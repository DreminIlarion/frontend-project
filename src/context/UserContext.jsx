import React, { createContext, useContext, useEffect, useState, useCallback, useRef } from "react";
import Cookies from "js-cookie";

const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const hasCheckedTokens = useRef(false);

  const logout = useCallback(async () => {
    console.log("‚õî –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥...");

    try {
      const response = await fetch("https://personal-account-c98o.onrender.com/logout/", {
        method: "GET",
        credentials: "include",
      });

      if (!response.ok) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ logout:", response.status);
      } else {
        console.log("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ logout:", error);
    }

    console.log("‚õî –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—É–∫–∏...");
    const cookies = document.cookie.split("; ");
    cookies.forEach((cookie) => {
      const [name] = cookie.split("=");
      Cookies.remove(name, { path: "/" });
    });

    setUser(null);
  }, []);

  const setTokens = useCallback(async (accessToken, refreshToken) => {
    try {
      const setTokenUrl = `https://personal-account-c98o.onrender.com/set/token/${accessToken}/${refreshToken}`;
      const response = await fetch(setTokenUrl, {
        method: "GET",
        credentials: "include",
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      console.log("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", data);
      return true;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–æ–≤:", error);
      return false;
    }
  }, []);

  const refreshAccessToken = useCallback(
    async (refreshToken) => {
      if (!refreshToken) {
        console.warn("‚ùå Refresh —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã—Ö–æ–¥...");
        await logout();
        return null;
      }

      try {
        console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º access —Ç–æ–∫–µ–Ω...");
        const response = await fetch(
          `https://registration-s6rk.onrender.com/validate/jwt/refresh/${refreshToken}`,
          {
            method: "GET",
            credentials: "include",
          }
        );

        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${response.status}`);
        }

        const data = await response.json();

        if (data === false) {
          console.warn("‚ùå Refresh —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª false). –í—ã—Ö–æ–¥...");
          throw new Error("Refresh —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.");
        }

        const newAccessToken = data.access;

        if (!newAccessToken) {
          throw new Error("–ù–æ–≤—ã–π access —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω.");
        }

        Cookies.set("access", newAccessToken, { path: "/", secure: true, sameSite: "Strict" });

        const success = await setTokens(newAccessToken, refreshToken);
        if (!success) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
        }

        setUser({ loggedIn: true });
        return newAccessToken;
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ access —Ç–æ–∫–µ–Ω–∞:", error);
        await logout();
        return null;
      }
    },
    [logout, setTokens]
  );

  const fetchWithAuth = useCallback(
    async (url, options = {}) => {
      let accessToken = Cookies.get("access");
      const refreshToken = Cookies.get("refresh");

      if (!accessToken || !refreshToken) {
        console.warn("‚ùå –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–π—Ç–∏...");
        await logout();
        return null;
      }

      const headers = new Headers(options.headers || {});
      headers.set("Authorization", `Bearer ${accessToken}`);

      const response = await fetch(url, {
        ...options,
        headers,
        credentials: "include",
      });

      if (response.status === 401) {
        console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 401. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...");
        const newAccessToken = await refreshAccessToken(refreshToken);

        if (!newAccessToken) {
          console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –í—ã—Ö–æ–¥...");
          return null;
        }

        headers.set("Authorization", `Bearer ${newAccessToken}`);
        return fetch(url, {
          ...options,
          headers,
          credentials: "include",
        });
      }

      return response;
    },
    [refreshAccessToken, logout]
  );

  const checkTokens = useCallback(
    async () => {
      if (hasCheckedTokens.current) {
        console.log("‚ÑπÔ∏è checkTokens —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...");
        return;
      }
      hasCheckedTokens.current = true;

      setLoading(true);

      try {
        const accessToken = Cookies.get("access");
        const refreshToken = Cookies.get("refresh");

        if (!refreshToken || !accessToken) {
          console.log("‚ÑπÔ∏è –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.");
          setUser(null);
          setLoading(false);
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ setTokens, –±–µ–∑ /validate/jwt/access
        const success = await setTokens(accessToken, refreshToken);
        if (success) {
          setUser({ loggedIn: true });
        } else {
          console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ checkTokens. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...");
          const newAccessToken = await refreshAccessToken(refreshToken);
          if (newAccessToken) {
            setUser({ loggedIn: true });
          } else {
            setUser(null);
          }
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–æ–≤:", error);
        setUser(null);
      } finally {
        setLoading(false);
      }
    },
    [refreshAccessToken, setTokens]
  );

  useEffect(() => {
    checkTokens();

    const interval = setInterval(() => {
      console.log("üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤...");
      checkTokens();
    }, 5 * 60 * 1000);

    return () => {
      console.log("üõë –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...");
      clearInterval(interval);
    };
  }, [checkTokens]);

  const login = useCallback(
    async (access, refresh) => {
      if (typeof access !== "string" || typeof refresh !== "string") {
        throw new Error("–¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏!");
      }

      Cookies.set("access", access, { path: "/", secure: true, sameSite: "Strict", expires: 1 });
      const currentRefresh = Cookies.get("refresh");
      if (!currentRefresh || currentRefresh !== refresh) {
        Cookies.set("refresh", refresh, { path: "/", secure: true, sameSite: "Strict", expires: 7 });
      } else {
        console.log("‚ÑπÔ∏è Refresh —Ç–æ–∫–µ–Ω –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.");
      }

      const success = await setTokens(access, refresh);
      if (success) {
        setUser({ loggedIn: true });
      } else {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞.");
        await logout();
      }
    },
    [logout, setTokens]
  );

  return (
    <UserContext.Provider value={{ user, login, logout, loading, fetchWithAuth }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);