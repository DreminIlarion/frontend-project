import React, { createContext, useContext, useEffect, useState, useCallback } from "react";
import Cookies from "js-cookie";

const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º refresh —Ç–æ–∫–µ–Ω–∞
  const refreshAccessToken = useCallback(async () => {
    const refreshToken = Cookies.get("refresh");
    const oldAccessToken = Cookies.get("access");

    if (!refreshToken) {
      console.warn("‚ùå Refresh —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã—Ö–æ–¥...");
      await logout();
      return null;
    }

    try {
      console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º access —Ç–æ–∫–µ–Ω...");
      const response = await fetch(
        `https://registration-fastapi.onrender.com/validate/jwt/refresh/${refreshToken}`,
        {
          method: "GET",
          credentials: "include",
        }
      );

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: ${response.status}`);
      }

      const data = await response.json();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª –ª–∏ —Å–µ—Ä–≤–µ—Ä false (–∏—Å—Ç—ë–∫—à–∏–π –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh —Ç–æ–∫–µ–Ω)
      if (data === false) {
        console.warn("‚ùå Refresh —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (—Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª false). –í—ã—Ö–æ–¥...");
        throw new Error("Refresh —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.");
      }

      const newAccessToken = data.access;

      if (!newAccessToken) {
        throw new Error("–ù–æ–≤—ã–π access —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω.");
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π access —Ç–æ–∫–µ–Ω –≤ –∫—É–∫–∏
      Cookies.set("access", newAccessToken, { path: "/", secure: true, sameSite: "None", expires: 1 });
      console.log("‚úÖ –ù–æ–≤—ã–π access —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω:", newAccessToken);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const setTokenResponse = await fetch(
        `https://personal-account-fastapi.onrender.com/set/token/${newAccessToken}/${refreshToken}`,
        {
          method: "GET",
          credentials: "include",
        }
      );

      const setTokenData = await setTokenResponse.json();
      if (setTokenData.status_code !== 200 || setTokenData.message !== "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ") {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
      }

      console.log("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      const hasReloaded = localStorage.getItem("hasReloadedAfterTokenRefresh");
      if (!hasReloaded) {
        console.log("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...");
        localStorage.setItem("hasReloadedAfterTokenRefresh", "true");
        window.location.reload();
      }

      return newAccessToken;
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ access —Ç–æ–∫–µ–Ω–∞:", error);
      await logout();
      return null;
    }
  }, []);

  // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ 401
  const fetchWithAuth = useCallback(
    async (url, options = {}) => {
      const accessToken = Cookies.get("access");

      if (!accessToken) {
        console.warn("‚ùå Access —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í—ã—Ö–æ–¥...");
        await logout();
        return null;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω
      const headers = new Headers(options.headers || {});
      if (!headers.has("Authorization")) {
        headers.set("Authorization", `Bearer ${accessToken}`);
      }

      const response = await fetch(url, {
        ...options,
        headers,
        credentials: "include",
      });

      if (response.status === 401) {
        console.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ 401. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω...");
        const newAccessToken = await refreshAccessToken();

        if (!newAccessToken) {
          console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –í—ã—Ö–æ–¥...");
          return null;
        }

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        headers.set("Authorization", `Bearer ${newAccessToken}`);
        return fetch(url, {
          ...options,
          headers,
          credentials: "include",
        });
      }

      return response;
    },
    [refreshAccessToken]
  );

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ —Å –≤—ã–∑–æ–≤–æ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ logout
  const logout = useCallback(async () => {
    console.log("‚õî –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥...");

    try {
      // –í—ã–∑—ã–≤–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤—ã—Ö–æ–¥–∞
      const response = await fetch("https://personal-account-fastapi.onrender.com/logout/", {
        method: "GET",
        credentials: "include",
      });

      if (!response.ok) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∞:", response.status);
      } else {
        console.log("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.");
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –≤—ã—Ö–æ–¥–∞:", error);
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—É–∫–∏
    console.log("‚õî –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—É–∫–∏...");
    const cookies = document.cookie.split("; ");
    cookies.forEach((cookie) => {
      const [name] = cookie.split("=");
      Cookies.remove(name, { path: "/", domain: "personal-account-fastapi.onrender.com" });
      Cookies.remove(name, { path: "/" });
    });

    setUser(null);
    // –£–±—Ä–∞–Ω–æ navigate("/") ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç –±—É–¥–µ—Ç –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
  const fetchToken = useCallback(async () => {
    setLoading(true);

    try {
      const accessToken = Cookies.get("access");
      const refreshToken = Cookies.get("refresh");

      if (!accessToken || !refreshToken) {
        console.warn("‚ùå –¢–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
        setUser(null);
        setLoading(false);
        return;
      }

      const response = await fetch(
        `https://personal-account-fastapi.onrender.com/set/token/${accessToken}/${refreshToken}`,
        {
          method: "GET",
          credentials: "include",
        }
      );

      const data = await response.json();

      if (data.status_code === 200 && data.message === "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ") {
        setUser({ loggedIn: true });
      } else {
        console.warn("‚ö†Ô∏è –¢–æ–∫–µ–Ω—ã –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å...");
        const newAccessToken = await refreshAccessToken();

        if (newAccessToken) {
          setUser({ loggedIn: true });
        } else {
          setUser(null);
        }
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–æ–≤:", error);
      setUser(null);
    } finally {
      setLoading(false);
    }
  }, [refreshAccessToken]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ + –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
  useEffect(() => {
    fetchToken();
    const interval = setInterval(fetchToken, 10 * 60 * 1000);
    return () => clearInterval(interval);
  }, [fetchToken]);

  // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    localStorage.removeItem("hasReloadedAfterTokenRefresh");
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
  const login = (access, refresh) => {
    if (typeof access !== "string" || typeof refresh !== "string") {
      console.error("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏!");
      return;
    }

    Cookies.set("access", access, { path: "/", secure: true, sameSite: "None", expires: 1 });
    Cookies.set("refresh", refresh, { path: "/", secure: true, sameSite: "None", expires: 7 });

    setUser({ loggedIn: true });
  };

  return (
    <UserContext.Provider value={{ user, login, logout, loading, fetchWithAuth }}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => useContext(UserContext);