import React, { useState,useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import toast, { Toaster } from 'react-hot-toast';

import { useUser } from '../context/UserContext';  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
import { FaVk, FaYandex, FaEnvelope } from 'react-icons/fa';
import Cookies from 'js-cookie';

const Login = () => {
  const [email, setEmail] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isPhoneLogin, setIsPhoneLogin] = useState(false); // –î–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –≤—Ö–æ–¥–æ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email
  const navigate = useNavigate();
  const { login } = useUser();  // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ login –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

  const API_URL = process.env.REACT_APP1_GET_TOKEN;

  const getTokenFromCookies = (tokenName) => {
    return Cookies.get(tokenName);
  };

  

  const handleLogin = async (e) => {
    e.preventDefault();
    setIsLoading(true);
  
    const body = isPhoneLogin
      ? { phone_number: phoneNumber, hash_password: password }
      : { email: email, hash_password: password };
  
    const loginEndpoint = isPhoneLogin
      ? "/api/v1/authorizations/login/phone/number"
      : "/api/v1/authorizations/login/email";
  
    try {
      const response = await fetch(
        `${process.env.REACT_APP_DOMAIN_REGISTRATION}${loginEndpoint}`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(body),
        }
      );
  
      if (response.ok) {
        const data = await response.json();
        
        const { access, refresh } = data;
  
        if (typeof access !== "string" || typeof refresh !== "string") {
          console.error("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏!");
          toast.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.");
          setIsLoading(false);
          return;
        }
  
        Cookies.set("access", access, { path: "/", secure: true, sameSite: "None", expires: 1 });
        Cookies.set("refresh", refresh, { path: "/", secure: true, sameSite: "None", expires: 7 });
  
        login(access, refresh); // ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  
        toast.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
        setTimeout(() => {
          navigate("/profile");
          window.location.reload();  // üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        }, 1500);

      } else {
        const errorData = await response.json();
        toast.error(errorData.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
      toast.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.");
    } finally {
      setIsLoading(false);
    }
  };
  

  const handleOAuthRedirect = async (provider) => {
    setIsLoading(true);
    try {
      const response = await fetch(
        `${process.env.REACT_APP_LINK}${provider}/link`,
        { method: 'GET' }
      );

      const textResponse = await response.text();

      if (response.ok && textResponse) {
        const cleanLink = textResponse.replace(/^"|"$/g, '');
        window.location.href = cleanLink;
      } else {
        toast.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
    } finally {
      setIsLoading(false);
    }
  };

  

  return (
    <div className="min-h-screen flex justify-center items-center bg-gradient-to-r from-blue-500 to-purple-600">
      <Toaster position="top-right" />
      <div className="bg-white p-8 rounded-2xl shadow-lg w-full max-w-md">
        <h2 className="text-3xl font-bold text-center mb-8 text-gray-800">–í—Ö–æ–¥</h2>
        <form onSubmit={handleLogin}>
          <div className="flex justify-center mb-6">
            <button
              type="button"
              className={`px-6 py-3 font-semibold rounded-l-lg ${!isPhoneLogin ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-800'} text-lg`}
              onClick={() => setIsPhoneLogin(false)}
            >
              –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Email
            </button>
            <button
              type="button"
              className={`px-6 py-3 font-semibold rounded-r-lg ${isPhoneLogin ? 'bg-blue-600 text-white' : 'bg-gray-300 text-gray-800'} text-lg`}
              onClick={() => setIsPhoneLogin(true)}
            >
              –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –¢–µ–ª–µ—Ñ–æ–Ω
            </button>
          </div>
  
          {!isPhoneLogin ? (
            <div className="mb-6">
              <label htmlFor="email" className="block text-sm font-semibold mb-2 text-gray-700">
                –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
              </label>
              <input
              required
                id="email"
                type="email"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
              />
            </div>
          ) : (
            <div className="mb-6">
              <label htmlFor="phone_number" className="block text-sm font-semibold mb-2 text-gray-700">
                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
              </label>
              <input
              required
                id="phone_number"
                type="tel"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
                value={phoneNumber}
                onChange={(e) => setPhoneNumber(e.target.value)}
                placeholder="+79.."
              />
            </div>
          )}
  
          <div className="mb-8">
            <label htmlFor="password" className="block text-sm font-semibold mb-2 text-gray-700">
              –ü–∞—Ä–æ–ª—å
            </label>
            <input
            required
              id="password"
              type="password"
              className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            />
          </div>
  
          <button
            type="submit"
            className={`w-full py-3 text-white font-bold rounded-lg transition ${isLoading ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'}`}
            disabled={isLoading}
          >
            {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í–æ–π—Ç–∏'}
          </button>
        </form>
  
        <div className="mt-6 text-center">
          <p className="text-sm font-medium mb-4 text-gray-700">–ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑:</p>
          <div className="grid grid-cols-1 gap-4">
           {/* VK button */}
            <button
                      onClick={() => handleOAuthRedirect("vk")}
                      className={`flex items-center justify-center gap-2 h-10 rounded-md font-bold text-white bg-[#0077FF] transition-all hover:bg-[#005bbf] active:scale-95 shadow-md `}
                      
                    >
                      <FaVk size={20} /> VK ID
                    </button>

            {/* Yandex button */}
            <button
                      onClick={() => handleOAuthRedirect("yandex")}
                      className={`flex items-center justify-center gap-2 h-10 rounded-md font-bold text-white bg-red-600 transition-all hover:bg-red-700 active:scale-95 shadow-md`}
                      
                    >
                      <FaYandex size={18} /> –Ø–Ω–¥–µ–∫—Å
                    </button>


          </div>
        </div>
  
        <p className="mt-6 text-center text-sm text-gray-700">
          –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?{' '}
          <span
            role="link"
            tabIndex={0}
            onClick={() => navigate('/registration')}
            className="cursor-pointer underline text-blue-600 font-semibold"
          >
            –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å
          </span>
        </p>

        {/* Button to return to home */}
        <div className="mt-4 text-center">
          <button
            onClick={() => navigate('/')}
            className="bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition-all hover:bg-blue-600 hover:shadow-lg"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>

      </div>
    </div>
  );
};

export default Login;
