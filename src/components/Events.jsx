import React, { useState, useEffect } from "react";

const Events = () => {
  const [events, setEvents] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(1); // –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  const [hasMore, setHasMore] = useState(true); // –ï—Å—Ç—å –ª–∏ –µ—â–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  const [registeredEvents, setRegisteredEvents] = useState(new Set());
  const [visitorData, setVisitorData] = useState({});

  

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    fetch(`${process.env.REACT_APP_VISITORS_GET}`, {
      credentials: "include",
    })
      .then((response) => response.json())
      .then((data) => {
        const registeredIds = new Set(data.map((entry) => entry.event_id));
        setRegisteredEvents(registeredIds);
        const visitorMap = data.reduce((acc, entry) => {
          acc[entry.event_id] = entry.unique_string;
          return acc;
        }, {});
        setVisitorData(visitorMap);
      })
      .catch((error) => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π:", error.message));
  }, []);


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const handleScroll = (e) => {
    const bottom = e.target.scrollHeight === e.target.scrollTop + e.target.clientHeight;
    if (bottom && !loading && hasMore) {
      setPage((prevPage) => prevPage + 1); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ / –æ—Ç–ø–∏—Å–∫–∏
  const handleRegistration = async (eventId) => {
    const isRegistered = registeredEvents.has(eventId);
    const url = `${process.env.REACT_APP_VISITORS}${isRegistered ? "delete" : "add"}/${eventId}`;
    const method = isRegistered ? "DELETE" : "POST";

    try {
      const response = await fetch(url, {
        method,
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
      });
      if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
      setRegisteredEvents((prev) => {
        const newSet = new Set(prev);
        isRegistered ? newSet.delete(eventId) : newSet.add(eventId);
        return newSet;
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
  const getQRCode = async (eventId) => {
    const uniqueString = visitorData[eventId];
    if (!uniqueString) return;
    const qrUrl = `${process.env.REACT_APP_VISITORS_MAKE_QR}${uniqueString}`;
    window.open(qrUrl, "_blank");
  };

  if (loading && page === 1) return <p className="text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π...</p>;
  if (error) return <p className="text-center text-red-500">–û—à–∏–±–∫–∞: {error}</p>;

  return (
    <div className="max-w-6xl mx-auto p-6" onScroll={handleScroll}>
      <h2 className="text-4xl font-bold text-center mb-8">–°–æ–±—ã—Ç–∏—è</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      {events.filter(event => registeredEvents.has(event.id)).length > 0 ? (
  events
    .filter(event => registeredEvents.has(event.id)) // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    .map((event) => (
      <div
        key={event.id}
        className="bg-white shadow-lg rounded-lg p-6 transform transition-all duration-300 ease-in-out hover:scale-105 hover:shadow-xl hover:bg-gray-100"
        style={{ cursor: "pointer" }}
      >
        <div className="flex flex-col">
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞ */}
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-xl font-semibold text-gray-900 hover:text-blue-500 truncate">
              {event.name_event}
            </h3>
            <span className="text-sm text-gray-500">
              {event.date_time ? new Date(event.date_time).toLocaleString() : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
            </span>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="mt-4 space-y-2 text-gray-700">
            <p><strong>–ú–µ—Å—Ç–æ:</strong> {event.location || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</p>
            <p><strong>–õ–∏–º–∏—Ç –ª—é–¥–µ–π:</strong> {event.limit_people || "–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ"}</p>
            <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {event.description || "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ"}</p>
          </div>
        </div>

        <div className="flex gap-4 mt-4">
          <button
            onClick={(e) => {
              e.stopPropagation();
              handleRegistration(event.id);
            }}
            className="flex-1 py-3 text-white font-semibold rounded-lg transition-all transform hover:scale-105 bg-red-500 hover:bg-red-600"
          >
            –û—Ç–ø–∏—Å–∞—Ç—å—Å—è ‚ùå
          </button>
          <button
            onClick={(e) => {
              e.stopPropagation();
              getQRCode(event.id);
            }}
            className="bg-blue-500 hover:bg-blue-600 text-white py-3 px-5 rounded-lg transition-transform transform hover:scale-105"
          >
            QR-–∫–æ–¥ üì≤
          </button>
        </div>
      </div>
    ))
) : (
  <p className="text-center text-gray-500 col-span-2">–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ.</p>
)}
      </div>

      {loading && <p className="text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</p>}
    </div>
  );
};

export default Events;
